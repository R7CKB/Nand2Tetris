function Screen.init 3
push constant 16384
pop static 0
push constant 0
not
pop static 4
push constant 16
call Array.new 1
pop static 1
push constant 16
call Array.new 1
pop static 2
push constant 16
call Array.new 1
pop static 3
push constant 0
pop local 0
push constant 1
pop local 1
push constant 1
pop local 2
label WHILE_EXP0
push local 0
push constant 16
lt
not
if-goto WHILE_END0
push local 0
push static 1
add
push local 1
pop temp 0
pop pointer 1
push temp 0
pop that 0
push local 0
push static 3
add
push local 2
pop temp 0
pop pointer 1
push temp 0
pop that 0
push local 0
push static 2
add
push local 1
neg
pop temp 0
pop pointer 1
push temp 0
pop that 0
push local 1
push local 1
add
pop local 1
push local 2
push local 1
add
pop local 2
push local 0
push constant 1
add
pop local 0
goto WHILE_EXP0
label WHILE_END0
push constant 0
return
function Screen.clearScreen 1
push constant 0
pop local 0
label WHILE_EXP0
push local 0
push constant 8192
lt
not
if-goto WHILE_END0
push local 0
push static 0
add
push constant 0
pop temp 0
pop pointer 1
push temp 0
pop that 0
push local 0
push constant 1
add
pop local 0
goto WHILE_EXP0
label WHILE_END0
push constant 0
return
function Screen.setColor 0
push argument 0
pop static 4
push constant 0
return
function Screen.drawWord 0
push static 4
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push argument 0
push static 0
add
push argument 0
push static 0
add
pop pointer 1
push that 0
push argument 1
or
pop temp 0
pop pointer 1
push temp 0
pop that 0
goto IF_END0
label IF_FALSE0
push argument 0
push static 0
add
push argument 0
push static 0
add
pop pointer 1
push that 0
push argument 1
not
and
pop temp 0
pop pointer 1
push temp 0
pop that 0
label IF_END0
push constant 0
return
function Screen.drawPixel 2
push constant 32
push argument 1
call Math.multiply 2
push argument 0
push constant 16
call Math.divide 2
add
pop local 0
push argument 0
push constant 15
and
push static 1
add
pop pointer 1
push that 0
pop local 1
push local 0
push local 1
call Screen.drawWord 2
pop temp 0
push constant 0
return
function Screen.drawVerticalLine 2
push constant 32
push argument 1
call Math.multiply 2
push argument 0
push constant 16
call Math.divide 2
add
pop local 0
push argument 0
push constant 15
and
push static 1
add
pop pointer 1
push that 0
pop local 1
label WHILE_EXP0
push argument 1
push argument 2
lt
not
if-goto WHILE_END0
push local 0
push local 1
call Screen.drawWord 2
pop temp 0
push local 0
push constant 32
add
pop local 0
push argument 1
push constant 1
add
pop argument 1
goto WHILE_EXP0
label WHILE_END0
push constant 0
return
function Screen.drawHorizontalLine 9
push constant 32
push argument 1
call Math.multiply 2
pop local 2
push argument 0
push constant 16
call Math.divide 2
pop local 3
push argument 2
push constant 16
call Math.divide 2
pop local 4
push argument 0
push constant 15
and
push static 2
add
pop pointer 1
push that 0
pop local 6
push argument 2
push constant 15
and
push static 3
add
pop pointer 1
push that 0
pop local 7
push local 3
push local 4
eq
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push argument 0
push constant 15
and
push static 2
add
pop pointer 1
push that 0
push argument 2
push constant 15
and
push static 3
add
pop pointer 1
push that 0
and
pop local 5
push local 2
push local 3
add
push local 5
call Screen.drawWord 2
pop temp 0
push constant 0
return
label IF_FALSE0
push local 2
push local 3
add
push argument 0
push constant 15
and
push static 2
add
pop pointer 1
push that 0
call Screen.drawWord 2
pop temp 0
push local 4
push constant 1
sub
pop local 8
label WHILE_EXP0
push local 3
push local 8
lt
not
if-goto WHILE_END0
push local 3
push constant 1
add
pop local 3
push local 2
push local 3
add
push constant 0
not
call Screen.drawWord 2
pop temp 0
goto WHILE_EXP0
label WHILE_END0
push local 2
push local 4
add
push argument 2
push constant 15
and
push static 3
add
pop pointer 1
push that 0
call Screen.drawWord 2
pop temp 0
push constant 0
return
function Screen.drawAngledLine 11
push constant 0
pop local 0
push constant 0
pop local 1
push constant 0
pop local 2
push constant 32
pop local 3
push argument 2
push argument 0
sub
pop local 4
push argument 3
push argument 1
sub
pop local 5
push local 3
push argument 1
call Math.multiply 2
pop local 8
push argument 0
push constant 16
call Math.divide 2
pop local 9
push argument 0
push constant 15
and
push static 1
add
pop pointer 1
push that 0
pop local 10
push argument 1
push argument 3
gt
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push local 3
neg
pop local 3
push local 5
neg
pop local 5
label IF_FALSE0
push local 4
push constant 1
add
pop local 6
push local 5
push constant 1
add
pop local 7
label WHILE_EXP0
push local 0
push local 6
lt
push local 1
push local 7
lt
and
not
if-goto WHILE_END0
push local 8
push local 9
add
push local 10
call Screen.drawWord 2
pop temp 0
push local 2
push constant 0
lt
if-goto IF_TRUE1
goto IF_FALSE1
label IF_TRUE1
push local 0
push constant 1
add
pop local 0
push local 2
push local 5
add
pop local 2
push argument 0
push constant 1
add
pop argument 0
push argument 0
push constant 16
call Math.divide 2
pop local 9
push argument 0
push constant 15
and
push static 1
add
pop pointer 1
push that 0
pop local 10
goto IF_END1
label IF_FALSE1
push local 1
push constant 1
add
pop local 1
push local 2
push local 4
sub
pop local 2
push local 8
push local 3
add
pop local 8
label IF_END1
goto WHILE_EXP0
label WHILE_END0
push constant 0
return
function Screen.drawLine 0
push argument 0
push argument 2
eq
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push argument 1
push argument 3
gt
if-goto IF_TRUE1
goto IF_FALSE1
label IF_TRUE1
push argument 1
pop static 5
push argument 3
pop argument 1
push static 5
pop argument 3
label IF_FALSE1
push argument 0
push argument 1
push argument 3
call Screen.drawVerticalLine 3
pop temp 0
push constant 0
return
label IF_FALSE0
push argument 0
push argument 2
gt
if-goto IF_TRUE2
goto IF_FALSE2
label IF_TRUE2
push argument 0
pop static 5
push argument 2
pop argument 0
push static 5
pop argument 2
push argument 1
pop static 5
push argument 3
pop argument 1
push static 5
pop argument 3
label IF_FALSE2
push argument 1
push argument 3
eq
if-goto IF_TRUE3
goto IF_FALSE3
label IF_TRUE3
push argument 0
push argument 1
push argument 2
call Screen.drawHorizontalLine 3
pop temp 0
push constant 0
return
label IF_FALSE3
push argument 0
push argument 1
push argument 2
push argument 3
call Screen.drawAngledLine 4
pop temp 0
push constant 0
return
function Screen.drawRectangle 8
push constant 32
push argument 1
call Math.multiply 2
pop local 0
push argument 0
push constant 16
call Math.divide 2
pop local 1
push argument 2
push constant 16
call Math.divide 2
pop local 2
push argument 0
push constant 15
and
push static 2
add
pop pointer 1
push that 0
pop local 4
push argument 2
push constant 15
and
push static 3
add
pop pointer 1
push that 0
pop local 5
push local 2
push constant 1
sub
pop local 7
label WHILE_EXP0
push argument 1
push argument 3
lt
not
if-goto WHILE_END0
push local 1
push local 2
eq
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push argument 0
push constant 15
and
push static 2
add
pop pointer 1
push that 0
push argument 2
push constant 15
and
push static 3
add
pop pointer 1
push that 0
and
pop local 3
push local 0
push local 1
add
push local 3
call Screen.drawWord 2
pop temp 0
goto IF_END0
label IF_FALSE0
push local 1
pop local 6
push local 0
push local 1
add
push argument 0
push constant 15
and
push static 2
add
pop pointer 1
push that 0
call Screen.drawWord 2
pop temp 0
label WHILE_EXP1
push local 6
push local 7
lt
not
if-goto WHILE_END1
push local 6
push constant 1
add
pop local 6
push local 0
push local 6
add
push constant 0
not
call Screen.drawWord 2
pop temp 0
goto WHILE_EXP1
label WHILE_END1
push local 0
push local 2
add
push argument 2
push constant 15
and
push static 3
add
pop pointer 1
push that 0
call Screen.drawWord 2
pop temp 0
label IF_END0
push local 0
push constant 32
add
pop local 0
push argument 1
push constant 1
add
pop argument 1
goto WHILE_EXP0
label WHILE_END0
push constant 0
return
function Screen.drawCircle 4
push constant 0
pop local 0
push argument 2
pop local 1
push constant 3
push argument 2
push argument 2
add
sub
pop local 2
push argument 0
push argument 2
sub
push argument 1
push argument 0
push argument 2
add
call Screen.drawHorizontalLine 3
pop temp 0
label WHILE_EXP0
push local 1
push local 0
gt
not
if-goto WHILE_END0
push local 2
push constant 0
lt
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push local 2
push local 0
push local 0
add
push local 0
add
push local 0
add
add
push constant 6
add
pop local 2
push local 0
push constant 1
add
pop local 0
goto IF_END0
label IF_FALSE0
push local 2
push constant 0
gt
push local 1
push local 0
gt
and
if-goto IF_TRUE1
goto IF_FALSE1
label IF_TRUE1
push local 1
push constant 1
sub
pop local 1
push local 2
push constant 4
add
push local 1
push local 1
add
push local 1
add
push local 1
add
sub
pop local 2
label IF_FALSE1
label IF_END0
push argument 0
push argument 1
push local 0
push local 1
call Screen.drawCircleLines 4
pop temp 0
goto WHILE_EXP0
label WHILE_END0
push constant 0
return
function Screen.drawCircleLines 24
push argument 0
push argument 2
sub
pop local 0
push argument 0
push argument 2
add
pop local 1
push argument 1
push argument 3
sub
pop local 2
push argument 1
push argument 3
add
pop local 3
push constant 32
push local 2
call Math.multiply 2
pop local 4
push constant 32
push local 3
call Math.multiply 2
pop local 5
push local 0
push constant 16
call Math.divide 2
pop local 6
push local 1
push constant 16
call Math.divide 2
pop local 7
push local 0
push constant 15
and
push static 2
add
pop pointer 1
push that 0
pop local 9
push local 1
push constant 15
and
push static 3
add
pop pointer 1
push that 0
pop local 10
push argument 0
push argument 3
sub
pop local 12
push argument 0
push argument 3
add
pop local 13
push argument 1
push argument 2
sub
pop local 14
push argument 1
push argument 2
add
pop local 15
push constant 32
push local 14
call Math.multiply 2
pop local 16
push constant 32
push local 15
call Math.multiply 2
pop local 17
push local 12
push constant 16
call Math.divide 2
pop local 18
push local 13
push constant 16
call Math.divide 2
pop local 19
push local 12
push constant 15
and
push static 2
add
pop pointer 1
push that 0
pop local 21
push local 13
push constant 15
and
push static 3
add
pop pointer 1
push that 0
pop local 22
push local 6
push local 7
eq
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push local 9
push local 10
and
pop local 8
push local 4
push local 6
add
push local 8
call Screen.drawWord 2
pop temp 0
push local 5
push local 6
add
push local 8
call Screen.drawWord 2
pop temp 0
goto IF_END0
label IF_FALSE0
push local 4
push local 6
add
push local 9
call Screen.drawWord 2
pop temp 0
push local 5
push local 6
add
push local 9
call Screen.drawWord 2
pop temp 0
push local 7
push constant 1
sub
pop local 11
label WHILE_EXP0
push local 6
push local 11
lt
not
if-goto WHILE_END0
push local 6
push constant 1
add
pop local 6
push local 4
push local 6
add
push constant 0
not
call Screen.drawWord 2
pop temp 0
push local 5
push local 6
add
push constant 0
not
call Screen.drawWord 2
pop temp 0
goto WHILE_EXP0
label WHILE_END0
push local 4
push local 7
add
push local 10
call Screen.drawWord 2
pop temp 0
push local 5
push local 7
add
push local 10
call Screen.drawWord 2
pop temp 0
label IF_END0
push local 18
push local 19
eq
if-goto IF_TRUE1
goto IF_FALSE1
label IF_TRUE1
push local 21
push local 22
and
pop local 20
push local 16
push local 18
add
push local 20
call Screen.drawWord 2
pop temp 0
push local 17
push local 18
add
push local 20
call Screen.drawWord 2
pop temp 0
goto IF_END1
label IF_FALSE1
push local 16
push local 18
add
push local 21
call Screen.drawWord 2
pop temp 0
push local 17
push local 18
add
push local 21
call Screen.drawWord 2
pop temp 0
push local 19
push constant 1
sub
pop local 23
label WHILE_EXP1
push local 18
push local 23
lt
not
if-goto WHILE_END1
push local 18
push constant 1
add
pop local 18
push local 16
push local 18
add
push constant 0
not
call Screen.drawWord 2
pop temp 0
push local 17
push local 18
add
push constant 0
not
call Screen.drawWord 2
pop temp 0
goto WHILE_EXP1
label WHILE_END1
push local 16
push local 19
add
push local 22
call Screen.drawWord 2
pop temp 0
push local 17
push local 19
add
push local 22
call Screen.drawWord 2
pop temp 0
label IF_END1
push constant 0
return
