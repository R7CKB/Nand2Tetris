// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {

    field int length;
    field Array str;
    field boolean flag; // used to judge if a number is less than 0

    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
        let length = 0;
        let flag = false;
        if (maxLength = 0) {
            return this;
        }
        let str = Array.new(maxLength+1);
        return this;
    }

    /** Disposes this string. */
    method void dispose() {
        do Memory.deAlloc(this);
        return;
    }

    /** Returns the current length of this string. */
    method int length() {
        return length;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
        return str[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
        let str[j] = c;
        return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
        let str[length] = c;
        let length = length + 1;
        return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
        let str[length-1] = 0;
        let length = length - 1;
        return;
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {
        var int index, val, d;
        var boolean flag;
        let index = 0;
        let val = 0;
        let flag = false;
        if (str[index] = 45) { // minus sign (-)
            let flag = true;
            let index = index + 1;
        }
        while (index < length) {
            let d = str[index] - 48; // 48 means 0
            let val = (val * 10) + d;
            let index = index + 1;
        }
        if (flag) {
            return -val;
        }
        return val;
    }


    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
        // you can't use 'c' as char, if you do that, 
        // then you can't let  c = lastDigit + 48.
        // besides, you can't directly add the minus sign,
        // you need a flag to judge if the val is less than 0 or not.
        var int lastDigit,c;  
        let length = 0;
        if (val < 0){
            let flag = true;
            let val = Math.abs(val);
        }
        let lastDigit = val - ((val / 10) * 10);
        let c = lastDigit + 48;
        if (val < 10){
            if (flag){
                do appendChar(45);
                let flag = false;
            }
            do appendChar(c);
        }
        else{
            do setInt(val / 10);
            do appendChar(c);
        }
        return;
    }

    /** Returns the new line character. */
    function char newLine() {
        return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
        return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        return 34;
    }
}